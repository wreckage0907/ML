# -*- coding: utf-8 -*-
"""Coding_geng_Code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C7rIkeMfh5J-jQ3Z4AmnklEz3CP8waxe
"""

from google.colab import drive
drive.mount('/content/drive')

import cv2
import numpy as np
from pathlib import Path
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.preprocessing.image import img_to_array, load_img


harmless_folder = Path('/content/drive/MyDrive/data/harmless')
harmful_folder = Path("/content/drive/MyDrive/data/harmful")


harmless_images = []
for image_file in harmless_folder.glob('*.jpg'):
    img = load_img(image_file, target_size=(224, 224))
    img_array = img_to_array(img)
    harmless_images.append(img_array)

harmful_images = []
for image_file in harmful_folder.glob('*.jpg'):
    img = load_img(image_file, target_size=(224, 224))
    img_array = img_to_array(img)
    harmful_images.append(img_array)


harmless_image_arrays = np.array(harmless_images)
harmful_image_arrays = np.array(harmful_images)


harmless_image_arrays = harmless_image_arrays.astype('float32') / 255.0
harmful_image_arrays = harmful_image_arrays.astype('float32') / 255.0

harmless_labels = np.zeros(len(harmless_image_arrays), dtype='float32')  
harmful_labels = np.ones(len(harmful_image_arrays), dtype='float32')     

all_images = np.concatenate((harmless_image_arrays, harmful_image_arrays), axis=0)
all_labels = np.concatenate((harmless_labels, harmful_labels), axis=0)


all_labels = to_categorical(all_labels, num_classes=2)

model = Sequential()
model.add(Conv2D(32, (3, 3), activation="relu", input_shape=(224, 224, 3)))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(128, activation="relu"))
model.add(Dense(2, activation="softmax"))

model.compile(loss="categorical_crossentropy", optimizer="adam", metrics=["accuracy"])
model.fit(all_images, all_labels, epochs=10, batch_size=32)

image_path ="/content/drive/MyDrive/data/test/1.jpg"
img = load_img(image_path, target_size=(224, 224))
img_array = img_to_array(img)

img_array = img_array.astype('float32') / 255.0
img_array = np.expand_dims(img_array, axis=0)

prediction = model.predict(img_array)
predicted_class = np.argmax(prediction[0])

class_labels = ['harmless', 'harmful']

print("Predicted Class:", class_labels[predicted_class])

import cv2
import numpy as np
from tensorflow.keras.models import load_model

image = cv2.imread('/content/drive/MyDrive/data/test/2.jpg')

model = load_model('/content/my_model/saved_model.pb')

resized = cv2.resize(image, (224, 224))
normalized = resized.astype('float32') / 255.0
input_image = np.expand_dims(normalized, axis=0)

prediction = model.predict(input_image)[0]

label = 'harmful' if prediction[1] > prediction[0] else 'harmless'

color = (0, 0, 255) if label == 'harmful' else (0, 255, 0)

(h, w) = image.shape[:2]
y1 = int(h * prediction[0])
x1 = int(w * prediction[1])
y2 = int(h * (prediction[2] if len(prediction) == 4 else prediction[0] + prediction[2]))

import cv2
import numpy as np
from tensorflow.keras.models import load_model

image = cv2.imread('/content/drive/MyDrive/data/test/2.jpg')

model = load_model('/content/my_model')

def classify_box(box):
    resized = cv2.resize(box, (224, 224))
    normalized = resized.astype('float32') / 255.0
    input_image = np.expand_dims(normalized, axis=0)

    prediction = model.predict(input_image)[0]

    label = 'harmful' if prediction[1] > prediction[0] else 'harmless'

    return label

def classify_boxes(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    edges = cv2.Canny(gray, 100, 200)
    contours, hierarchy = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    boxes = []
    for contour in contours:
        (x, y, w, h) = cv2.boundingRect(contour)
        box = image[y:y+h, x:x+w]
        boxes.append(box)

    results = []
    for box in boxes:
        label = classify_box(box)
        results.append(label)

    return results

results = classify_boxes(image)


print(results)
